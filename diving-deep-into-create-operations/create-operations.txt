
# Understanding insert() Methods

> use contactData

> db.persons.insertOne(
    {
        name: "dummy",
        age: 30,
        hobbies: ["Sports", "Cooking"]
    }
)

> db.persons.insertOne(
    {
        name: "dummy2",
        age: 35,
        hobbies: ["Music", "Cinema"]
    }
)

> db.persons.insertMany(
    [
        {
            name: "dummy4",
            age: 18,
        },
                {
            name: "dummy4",
            age: 39,
        },
    ]
)

> db.persons.insert(
        {
            name: "dummy5",
            age: 18,
        }
)

# Ordered Inserts

> db.hobbies.insertMany(
    [
        {_id: "sports", name: "Sports"}, 
        {_id: "cooking", name: "Cooking"}, 
        {_id: "cars", name: "Cars"}, 
    ]
)

> As it is the default behaviour of mongoDB, if we try to insert a value already added before,
> it will cancel the operation and output an error, but since mongoDB by defaul treats each operation
> as standalone, it will insert the first value and cancel the others inserts when it gets to the second
> element.

> db.hobbies.insertMany(
    [
        {_id: "astronomy", name: "astronomy"}, 
        {_id: "cooking", name: "Cooking"}, 
        {_id: "hiking", name: "Hiking"}, 
    ]
)

> To override this behaviour, we can pass a second argument to insertMany().
> This second argument is a document used to configure this operation.
> In this case, it will fail the first two values and insert the last two values.

> db.hobbies.insertMany(
    [
        {_id: "sports", name: "Sports"}, 
        {_id: "cooking", name: "Cooking"}, 
        {_id: "astronomy", name: "astronomy"}, 
        {_id: "hiking", name: "Hiking"}, 
    ],
    {ordered: false}
)

# writeconcern

> Write concern describes the level of acknowledgment requested from MongoDB for write operations to a standalone mongod or to replica sets or to sharded clusters. 
> In sharded clusters, mongos instances will pass the write concern on to the shards.
>
> Starting in MongoDB 4.4, replica sets and sharded clusters support setting a global default write concern. 
> Operations which do not specify an explicit write concern inherit the global default write concern settings.

## Practice

> w can be set to either 1 or 0, for server acknowledgment.

> db.persons.insertOne(        
    {
        name: "dummy6",
        age: 38,
    },
    {
        writeConcern: {w: 1}
    }
)

> j can be set to either true or false, to trigger jornaling of the entry

> db.persons.insertOne(        
    {
        name: "dummy7",
        age: 38,
    },
    {
        writeConcern: {w: 1, j: true}
    }
)

> wtimeout can be set to the timeout of the write operation

> db.persons.insertOne(        
    {
        name: "dummy7",
        age: 38,
    },
    {
        writeConcern: {w: 1, j: true, wtimeout: 2000}
    }
)

# Atomicity

> In MongoDB, a write operation is atomic on the level of a single document, 
> even if the operation modifies multiple embedded documents within a single document.

## Multi-Document Transactions

> When a single write operation (e.g. db.collection.updateMany()) modifies multiple documents, 
> the modification of each document is atomic, but the operation as a whole is not atomic.

> When performing multi-document write operations, whether through a single write operation or multiple write operations, other operations may interleave.

# Importing Data

> in the terminal shell

> mongoimport tv-shows.json -d movieData -c movies --jsonArray --drop