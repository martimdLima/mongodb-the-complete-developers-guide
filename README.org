#+TITLE: MongoDB - The Complete Guide
#+DESCRIPTION: A Complete Guide about MongoDB Development for Web & Mobile Apps. CRUD Operations, Indexes, Aggregation Framework - All about MongoDB
#+AUTHOR: Martim Lima

* Understanding the Basics & CRUD Operations

** Check databases / Create a Database

#+BEGIN_SRC
    >  show dbs

# Use the specified database
> use dbname
#+END_SRC

** Create a document

#+BEGIN_SRC javascript
// Create a Document
> db.dbname.insertOne(
    {name: "product1", price: 12.99}
)

// Create a document with an embbeded document
> db.dbname.insertOne(
    {
        key1: "dummy",
        key2: 12.99,
        key3: "A dummy product",
        key4: {
            key4subkey1: "key4subval1",
            key4subkey1: key4subkey2
            }
    }
)

// Create various documents in a collection
> db.dbname.insertMany(
    [
        {
            key1: "value1",
            key2: "value2",
            key3: "value3",
            key4: "value4",
        },
        {
            key1: "value1",
            key2: "value2",
            key3: "value3",
            key4: "value4",
        }
    ]
)

#+END_SRC

** Find documents

#+START_VERSE
find() doesn't return an array of all the documents in a collection, but a cursor pretty() can only be applied when the result of the operation applied returns a cursor while find() returns a cursor, findOne() returns a document, so it can only be applied to find().
#+END_VERSE

#+BEGIN_SRC javascript
// Find all documents in a collection
> db.dbname.find()

// Find all documents in a collection in a prettified form
> db.dbname.find().pretty()

// Find all documents in a collection and convert it to array (This operation returns every document in a collection, despite the size)
> db.dbname.find().toArray()

// Find all documents in a collection and apply certain operations on each one
> db.dbname.find().forEach((colData) => {printjson(colData)})

// Find all documents in a collection that match a specific key/value
> db.dbname.find({key: value})

// Find all documents in a collection that are greater than the specificied key/value
> db.dbname.find({key: {$gt: value}})

// Find one document in a collection that match a specific key/value
> db.dbname.findOne({key: value})

// Find all documents in a collection that is greater than the specific key/value
> db.dbname.findOne({key: {$gt: value}})
#+END_SRC


** Update Documents

#+BEGIN_SRC javascript
// Update one document
> db.dbname.updateOne({key: "value"}, {$set: {key: "updtValue"}})

// Update many documents
> db.dbname.updateMany({}, {$set: {key: "updtValue"}})

// Update a document replacing all key/value pairs
> db.dbname.update({key: "value"}, {{key: "updtValue"}})i
#+END_SRC


** Replace Documents

#+BEGIN_SRC javascript

// Replace a document

> db.dbname.replaceOne(  {
    key1: "value1",
    key2: "value2",
    key3: "value3",
    key4: "value4",
  })
#+END_SRC


** Delete Documents

#+BEGIN_SRC javascript
// Delete one document
> db.dbname.deleteOne({key: "value"})

// Delete all documents that have common key/pair values
> db.dbname.deleteMany({commonKey: "commonValue"})

// Delete many documents
> db.dbname.deleteMany({})
#+END_SRC


** Projections

#+BEGIN_SRC
// Using projections to return all the documents with the choosen properties
> db.dbname.find({}, {key: value}).pretty()

// Using projections to return all the documents in the collection with the choosen properties, excluding some
> db.dbname.find({}, {key: value, _key: value}).pretty()
#+END_SRC

** Working with nested documents

#+BEGIN_SRC
// Update a document with a nested document
> db.dbname.updateMany({}, {$set: {key: {nestedKey1: "nestedValue1", nestedKey2: "nestedValue2"}}})

// Update a document with a nested document
> db.dbname.updateMany({}, {$set: {key: {nKey1: "nVal1", nKey2: "nVal2", nK3: {nk3a: "nk3aVal"}}}})
#+END_SRC


** Working with arrays

#+BEGIN_SRC
> db.dbname.updateOne({key: "val"}, {$set: {newKey: ["val1", "val2"]}})
#+END_SRC

** Acessing structured data

#+BEGIN_SRC
// Acessing a specific field of a document
 > db.dbname.findOne({key: "val"}).key2

// Searching for documents with a specific field
 > db.dbname.find({key: "value"}).pretty()

// Searching for documents that have a field with a specific subfield and value present
 > db.dbname.find({"key.subkey": "subkeyVal"}).pretty()

// Searching for documents that have a field that has a subfield with a specific subfield and value present
 > db.dbname.find({"key.subkey.subsubkey": "subsubkeyVal"}).pretty()
#+END_SRC
