# Update Operations

<br/>

## Update Operators

<br/>

### \$set

<br/>

<p>
The $set operator replaces the value of a field with the specified value.

If the field does not exist, $set will add a new field with the specified value, provided that the new field does not violate a type constraint. 
If you specify a dotted path for a non-existent field, $set will create the embedded documents as needed to fulfill the dotted path to the field.

</p>

<br/>

> Updating one field in one document

```sh
> db.users.updateOne({_id: ObjectId("5f765f11224c6744c2b0a946")}, {$set: {hobbies: [{title: "Sports", frequency: 5}, {title: "Music", frequency: 7}, {title: "Football", frequency: 2}]}})
```

<br/>

> Updating one field in many documents

```sh
> db.users.updateMany({"hobbies.title": "Sports"}, {$set: {isSporty: true}})
```

<br/>

> Updating multiple fields in one document

```sh
> db.users.updateOne({_id: ObjectId("5f765f11224c6744c2b0a946")}, {$set: {age: 42, phone: 985348777}})
```

<br/>

### \$inc

<br/>

<p>
The $inc operator increments a field by a specified value.

The $inc operator accepts positive and negative values.
If the field does not exist, $inc creates the field and sets the field to the specified value.
Use of the $inc operator on a field with a null value will generate an error.
$inc is an atomic operation within a single document.

</p>

<br/>

```sh
> db.users.updateOne({name: "dummy2"}, {$inc: {age: 2}})
```

### \$min

<br/>

<p>
The $min updates the value of the field to a specified value if the specified value is less than the current value of the field. 
The $min operator can compare values of different types, using the BSON comparison order.

If the field does not exist, the \$min operator sets the field to the specified value.

</p>

<br/>

```sh
> db.users.updateOne({name: "dummy5"}, {$min: {age: 40}})
```

### \$max

<br/>

<p>
The $max operator updates the value of the field to a specified value if the specified value is greater than the current value of the field. The $max operator can compare values of different types, using the BSON comparison order.

If the field does not exist, the \$max operator sets the field to the specified value.

</p>

<br/>

```sh
> db.users.updateOne({name: "dummy2"}, {$max: {age: 40}})
```

### \$mull

<br/>

<p>
Multiply the value of a field by a number.

If the field does not exist in a document, \$mul creates the field and sets the value to zero of the same numeric type as the multiplier.

</p>

<br/>

```sh
> db.users.updateOne({name: "dummy2"}, {$mul: {age: 2}})
```

<br/>

### \$unset

<br/>

<p>
The $unset operator deletes a particular field.

If the field does not exist, then \$unset does nothing (i.e. no operation).

When used with $ to match an array element, $unset replaces the matching element with null rather than removing the matching element from the array. This behavior keeps consistent the array size and element positions.

</p>

<br/>

```sh
> db.users.updateMany({isSporty: true}, {$unset: {phone: ""}})
```

<br/>

### \$rename

<br/>

<p>
The $rename operator updates the name of a field.

The $rename operator logically performs an $unset of both the old name and the new name, and then performs a \$set operation with the new name. As such, the operation may not preserve the order of the fields in the document; i.e. the renamed field may move within the document.

If the document already has a field with the <newName>, the \$rename operator removes that field and renames the specified <field> to <newName>.

If the field to rename does not exist in a document, \$rename does nothing (i.e. no operation).

For fields in embedded documents, the $rename operator can rename these fields as well as move the fields in and out of embedded documents. $rename does not work if these fields are in array elements.

</p>

<br/>

```sh
> db.users.updateMany({}, {$rename: {age: "totalAge"}})
```

<br/>

### upsert()

<br/>

<p>
If updateOne(), updateMany(), or replaceOne() includes upsert : true and no documents match the specified filter, then the operation creates a new document and inserts it. If there are matching documents, then the operation modifies or replaces the matching document or documents.
</p>

<br/>

```sh
> db.users.updateOne({name: "dummy4"}, {$set: {age: 29, hobbies: [{title: "Nice dinning", frequency: 3}], isSporty: true}}, {upsert: true})
```

## Array Update Operators

### \$

<p>
The positional $ operator identifies an element in an array to update without explicitly specifying the position of the element in the array.

    * To project, or return, an array element from a read operation, see the $ projection operator instead.
    * To update all elements in an array, see the all positional operator $[] instead.
    * To update all elements that match an array filter condition or conditions, see the filtered positional operator instead $[<identifier>].

</p>

```sh
> db.users.updateMany({hobbies: {$elemMatch: {title: "Sports", frequency: {$gte: 3}}}}, {$set: {"hobbies.$.highFrequency": true}})
```

<br/>

### \$[]

<p>
The all positional operator $[] indicates that the update operator should modify all elements in the specified array field.

If an upsert operation results in an insert, the query must include an exact equality match on the array field in order to use the \$[] positional operator in the update statement.

</p>
